WCpretty_dir <- paste0(tag_folder,'/WC-pretty')
Argos_data <- read.csv(paste0(WCpretty_dir,"/102464-Locations.csv"))
Argos_data$Date <- as.POSIXct(as.character(Argos_data$Date), format = '%m/%d/%Y %H:%M:%S', tz='UTC')
Beh_data <- read.csv(paste0(WCpretty_dir,"/102464-Behavior.csv"))
split_Beh <- split.dive.msg(Beh_data)
crawl_times <- lubridate::force_tz(as.POSIXct(split_Beh$Dives$StartTime, format = "%m/%d/%Y %H:%M:%S"), tzone = 'UTC')
CRAWL_data <- crawl.apply(Argos_data, model.interval = crawl_times, crs = 3310)
DIVE_data <- bhvr.interpolate(split_Beh$Dives, CRAWL_data$preds, matching = T)
SL_data <- sun.moon(DIVE_data)
SL_data<-SL_data[,c(1:3, 5:17, 23, 24, 44:65)]
SL_data$TimeofDay <- NA
for (i in 1:nrow(SL_data)) {
if (SL_data$sunAltitude[i] < -12) {
SL_data$TimeofDay[i] <- 'Night'
} else {
SL_data$TimeofDay[i] <- 'Day'
}
}
Oo36 <- SL_data
R.utils::sourceDirectory('C:/Users/marec/Docs/tagproc/R')
tag_folder <- "G:/Shared drives/METR_TagData/Killer whale/Sat tagging/Oo Tag 041/OoTag041-94805"
WCpretty_dir <- paste0(tag_folder,'/WC-pretty')
Argos_data <- read.csv(paste0(WCpretty_dir,"/94805-Locations.csv"))
Argos_data$Date <- as.POSIXct(as.character(Argos_data$Date), format = '%m/%d/%Y %H:%M:%S', tz='UTC')
Beh_data <- read.csv(paste0(WCpretty_dir,"/94805-Behavior.csv"))
split_Beh <- split.dive.msg(Beh_data)
crawl_times <- lubridate::force_tz(as.POSIXct(split_Beh$Dives$StartTime, format = "%m/%d/%Y %H:%M:%S"), tzone = 'UTC')
CRAWL_data <- crawl.apply(Argos_data, model.interval = crawl_times, crs = 3310)
DIVE_data <- bhvr.interpolate(split_Beh$Dives, CRAWL_data$preds, matching = T)
length(CRAWL_data$preds)
nrow(split_Beh$Dives)
R.utils::sourceDirectory('C:/Users/marec/Docs/tagproc/R')
tag_folder <- "G:/Shared drives/METR_TagData/Killer whale/Sat tagging/Oo Tag 041/OoTag041-94805"
WCpretty_dir <- paste0(tag_folder,'/WC-pretty')
Argos_data <- read.csv(paste0(WCpretty_dir,"/94805-Locations.csv"))
Argos_data$Date <- as.POSIXct(as.character(Argos_data$Date), format = '%m/%d/%Y %H:%M:%S', tz='UTC')
Beh_data <- read.csv(paste0(WCpretty_dir,"/94805-Behavior.csv"))
split_Beh <- split.dive.msg(Beh_data)
split_Beh$Dives$StartTime
crawl_times <- lubridate::force_tz(as.POSIXct(split_Beh$Dives$StartTime, format = "%m/%d/%Y %H:%M:%S"), tzone = 'UTC')
CRAWL_data <- crawl.apply(Argos_data, model.interval = crawl_times, crs = 3310)
CRAWL_data$preds
DIVE_data <- bhvr.interpolate(split_Beh$Dives, CRAWL_data$preds, matching = T)
nrow(CRAWL_data$preds)
nrow(split_Beh$Dives)
length(crawl_times)
crawl_times <- lubridate::force_tz(as.POSIXct(split_Beh$Dives$StartTime, format = "%m/%d/%Y %H:%M:%S"), tzone = 'UTC')
crawl_times[1]
split_Beh$Dives$StartTime[1]
R.utils::sourceDirectory('C:/Users/marec/Docs/tagproc/R')
tag_folder <- "G:/Shared drives/METR_TagData/Killer whale/Sat tagging/Oo Tag 041/OoTag041-94805"
WCpretty_dir <- paste0(tag_folder,'/WC-pretty')
Argos_data <- read.csv(paste0(WCpretty_dir,"/94805-Locations.csv"))
Argos_data$Date <- as.POSIXct(as.character(Argos_data$Date), format = '%m/%d/%Y %H:%M:%S', tz='UTC')
Beh_data <- read.csv(paste0(WCpretty_dir,"/94805-Behavior.csv"))
split_Beh <- split.dive.msg(Beh_data)
crawl_times <- lubridate::force_tz(as.POSIXct(split_Beh$Dives$StartTime, format = "%m/%d/%Y %H:%M:%S"), tzone = 'UTC')
CRAWL_data <- crawl.apply(Argos_data, model.interval = crawl_times, crs = 3310)
CRAWL_data <- crawl.apply(Argos_data, model.interval = crawl_times, crs = 3310)
DIVE_data <- bhvr.interpolate(split_Beh$Dives, CRAWL_data$preds, matching = T)
DIVE_data <- bhvr.interpolate(split_Beh$Dives, CRAWL_data$preds, matching = T)
length(crawl_times)
nrow(CRAWL_data$preds)
View((CRAWL_data$preds)
View((CRAWL_data$preds))
View(CRAWL_data$preds)
crawl_times
crawl_times[1]
crawl_times[length(crawl_times)]
R.utils::sourceDirectory('C:/Users/marec/Docs/tagproc/R')
tag_folder <- "G:/Shared drives/METR_TagData/Killer whale/Sat tagging/Oo Tag 041/OoTag041-94805"
WCpretty_dir <- paste0(tag_folder,'/WC-pretty')
Argos_data <- read.csv(paste0(WCpretty_dir,"/94805-Locations.csv"))
Argos_data$Date <- as.POSIXct(as.character(Argos_data$Date), format = '%m/%d/%Y %H:%M:%S', tz='UTC')
Beh_data <- read.csv(paste0(WCpretty_dir,"/94805-Behavior.csv"))
split_Beh <- split.dive.msg(Beh_data)
crawl_times <- lubridate::force_tz(as.POSIXct(split_Beh$Dives$StartTime, format = "%m/%d/%Y %H:%M:%S"), tzone = 'UTC')
crawl_times
length(crawl_times)
CRAWL_data <- crawl.apply(Argos_data, model.interval = crawl_times, crs = 3310)
length(CRAWL_data$preds$DeployID)
Argos_data$Type[1]
data=Argos_data
model.interval=crawl_times
crs=3310
land.adjust = NULL
img.path = NULL
(all(is.na(data$Error.radius)))
data$Error.radius <- data$Error.Semi.major.axis <- data$Error.Semi.minor.axis <- 0
suppressWarnings(suppressPackageStartupMessages(require(sf)))
#convert Date to POSIXct if necessary
if ('POSIXct' %in% class(data$Date) == FALSE) {
data$Date <- as.POSIXct(as.character(data$Date), format = '%m/%d/%Y %H:%M:%S', tz='UTC')
}
## Preparing Input Data for `crawl`
#### Converting to spatial data
sf_locs <- st_as_sf(data, coords = c("Longitude", "Latitude")) %>% st_set_crs("+init=epsg:4326")
### Error Parameters for GPS Data
# set code to eliminate records with NA for error_radius. Does not eliminate any records for test tracks used.
user <- data[which(data$Type == 'User'),]
data <- data[which(data$Type != 'User'),]
data <- data %>%
dplyr::filter(!(is.na(Error.radius)))
if (nrow(user) > 0) {
data <- rbind(user, data)
}
nrow(data)
nrow(Argos_data)
### Duplicate Times
make_unique <- function(x) {
xts::make.time.unique(x$Date, eps = 1)
}
data <- data %>% dplyr::arrange(DeployID, Date)
data$Date <- suppressWarnings(make_unique(data))
#########################################################
### Course Speed Filter
# Note that `argosfilter::sdafilter` additionally filters out very sharp turning angles.
speed_filt <- function(x) {
argosfilter::sdafilter(
lat = x$Latitude,
lon = x$Longitude,
dtime = x$Date,
lc = x$LocationQuality,
vmax = 7.5,
ang = -1)
}
data <- data %>%
dplyr::group_by(DeployID) %>%
tidyr::nest() %>%
dplyr::mutate(filtered = purrr::map(data, speed_filt)) %>%
tidyr::unnest(cols = c(data, filtered)) %>%
dplyr::filter(filtered %in% c("not", "end_location")) %>%
dplyr::select(-filtered) %>%
dplyr::arrange(DeployID, Date)
#########################################################
### Create a Spatial Object
sf_locs <- sf::st_as_sf(data, coords = c("Longitude", "Latitude")) %>% sf::st_set_crs(., 4326)
sf_locs <- sf::st_transform(sf_locs, crs)
sfc_as_cols <- function(x, names = c("x", "y")) {
stopifnot(inherits(x, "sf") && inherits(sf::st_geometry(x), "sfc_POINT"))
ret <- do.call(rbind, sf::st_geometry(x))
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
ret <- setNames(ret, names)
dplyr::bind_cols(x, ret)
}
# run this line instead of snippet in crawl-practical that includes activity data
sf_locs <- suppressWarnings(sf_locs %>% sfc_as_cols())
#########################################################
## Determining Your Model Parameters
### Create a Nested Data Structure
sf_locs <- sf_locs %>%
dplyr::group_by(DeployID) %>%
dplyr::arrange(Date) %>%
tidyr::nest() %>%
dplyr::mutate(data = purrr::map(data, sf::st_as_sf))
### Create model.matrix for Ellipse Errors
ellipse_matrix <- function(x) {
if (inherits(x, "sf")) {
sf::st_geometry(x) <- NULL
}
ret <- model.matrix(
~ Error.Semi.major.axis + Error.Semi.minor.axis +
Error.Ellipse.orientation,
model.frame(~ ., x, na.action = na.pass))[,-1]
}
sf_locs <- sf_locs %>%
dplyr::mutate(diag = purrr::map(data, ellipse_matrix),
diag = purrr::map(diag, ~ crawl::argosDiag2Cov(
.x[,1], .x[,2], .x[,3])),
data = purrr::map2(data, diag, dplyr::bind_cols)
) %>% dplyr::select(-diag)
### Create Model Parameters
init_params <- function(d) {
ret <- list(a = c(d$x[1], 0,
d$y[1], 0),
P = diag(c(10 ^ 2, 10 ^ 2,
10 ^ 2, 10 ^ 2)))
}
nrow(sf_locs$data)
nrow(sf_locs)
nrow(sf_locs$data)
sf_locs$data
sf_locs <- sf_locs %>%
dplyr::mutate(init = purrr::map(data, init_params),
fixpar = rep(
list(c(1, 1, NA, NA)),
nrow(.)),
constr = rep(list(
list(lower = c(-Inf, -4), upper = (c(Inf, 4)))),
nrow(.))
)
fit_crawl <- function(d, init, fixpar, constr, tryBrownian = TRUE) {
priors <- list(NULL,
ln_prior = function(par) {dnorm(par[2], 4, 4, log = TRUE)},
lap_prior = function(par) {-abs(par[2] - 4) / 5},
reg_prior = function(par) {dt(par[2] - 3, df = 1, log = TRUE)}
)
#cycle through 4 different prior values. the first being no prior/NULL
for (prior in priors) {
fit <- crawl::crwMLE(
mov.model =  ~ 1,
if (any(colnames(d) == "activity")) {
activity <- ~ I(activity)
} else {activity <- NULL},
err.model = list(
x =  ~ ln.sd.x - 1,
y =  ~ ln.sd.y - 1,
rho =  ~ error.corr
),
data = d,
Time.name = "Date",
initial.state = init,
fixPar = fixpar,
prior = prior,
constr = constr,
attempts = 1,
control = list(
trace = 0
),
initialSANN = list(
maxit = 1500,
trace = 0
)
)
if (!any(is.nan(fit$se))) {
return(fit)
}
}
#########################################################
# at this point, the most likely reason for failing to fit is b/c the mov't is
# more Brownian in nature. Here, we fix beta at 4 which specifies Brownian
if (any(is.nan(fit$se)) && tryBrownian) {
fixPar = c(1, 1, NA, 4)
fit <- crawl::crwMLE(
mov.model =  ~ 1,
err.model = list(
x =  ~ ln.sd.x - 1,
y =  ~ ln.sd.y - 1,
rho =  ~ error.corr
),
data = d,
Time.name = "Date",
initial.state = init,
fixPar = fixPar,
attempts = 1,
control = list(
trace = 0
),
initialSANN = list(
maxit = 500,
trace = 0
)
)
}
}
data_fit <- suppressWarnings(sf_locs %>%
dplyr::mutate(fit = purrr::pmap(list(d = data, init = init,
fixpar = fixpar, constr = constr),
fit_crawl),
params = purrr::map(fit, crawl::tidy_crwFit)))
data_fit <- data_fit %>%
dplyr::mutate(predict = purrr::map(fit,
crawl::crwPredict,
predTime = model.interval,
return.type = "flat"))
if (!is.null(img.path)) {
pdf(file = paste0(img.path, ".pdf"), height = 8, width = 7)
data_fit$predict %>% purrr::walk(crawl::crwPredictPlot, plotType = "map")
dev.off()
}
as.sf <- function(p, id, epsg, type, loctype) {
p <-
sf::st_as_sf(p, coords = c("mu.x","mu.y")) %>%
dplyr::mutate(TimeNum = lubridate::as_datetime(TimeNum),
DeployID = id) %>%
dplyr::rename(pred_dt = TimeNum) %>%
dplyr::filter(locType == loctype) %>%
sf::st_set_crs(.,epsg)
if (type == "POINT") {return(p)}
if (type == "LINE") {
p <- p %>% dplyr::arrange(pred_dt) %>%
sf::st_geometry() %>%
st_cast("MULTIPOINT", ids = as.integer(as.factor(p$DeployID))) %>%
st_cast("MULTILINESTRING") %>%
st_sf(DeployID = unique(p$DeployID))
return(p)
}
}
data_fit <- data_fit %>%
dplyr::mutate(sf_points = purrr::map2(predict, DeployID,
as.sf,
epsg = crs,
type = "POINT",
loctype = "p"),
sf_line = purrr::map2(predict, DeployID,
as.sf,
epsg = crs,
type = "LINE",
loctype = "p"))
# Isolate predicted points
sf_pred_points <- data_fit$sf_points %>%
purrr::lift(rbind)() %>%
sf::st_set_crs(crs)
sf_pred_lines <- data_fit$sf_line %>%
purrr::lift(rbind)() %>%
sf::st_set_crs(crs)
# Transform these back to Lat Long
m <- sf_pred_points %>%
sf::st_transform(4326)
sf_pred_lines <- sf_pred_lines %>%
sf::st_transform(4326)
xys <- as.character(m$geometry)
x <- y <- vector()
for (i in 1:length(xys)) {
xyi <- xys[i]
xyi <- substr(xyi, 3, nchar(xyi))
xyi <- substr(xyi, 1, nchar(xyi) - 1)
xi <- strsplit(xyi, ", ")[[1]][1]
yi <- strsplit(xyi, ", ")[[1]][2]
x <- c(x, xi)
y <- c(y, yi)
}
predicted.path <- data.frame(x,y)
nrow(predicted.path)
nrow(data_fit)
nrow(data_fit$DeployID)
length(data_fit$DeployID)
length(data_fit$data)
length(data_fit$data)
data_fit
data_fit$data
nrow(data_fit$data[[1]])
nrow(Argos_data)
nrow(data_fit$predict[[1]])
mr <- data_fit$predict[[1]]
nrow(mr)
View(mr)
nrow(mr[which(mr$locType == 'p'),])
crawl_times
mr$Date[1]
crawl_times[1]
crawl_times[2]
length(unique(mr$Date))
nrow(mr)
unique(mr$Date[1:500] == mr[which(mr$locType=='p'),]$Date[1:500])
data.frame(mr$Date[1:1219] == mr[which(mr$locType=='p'),]$Date[1:1219])
View(data.frame(mr$Date[1:1219] == mr[which(mr$locType=='p'),]$Date[1:1219]))
View(data.frame(mr$Date[1:1219],mr[which(mr$locType=='p'),]$Date[1:1219]))
View(data.frame(crawl_times[1:1219],mr[which(mr$locType=='p'),]$Date[1:1219]))
View(split_Beh$Dives)
R.utils::sourceDirectory('C:/Users/marec/Docs/tagproc/R')
tag_folder <- "G:/Shared drives/METR_TagData/Killer whale/Sat tagging/Oo Tag 036/OoTag036-102464"
WCpretty_dir <- paste0(tag_folder,'/WC-pretty')
Argos_data <- read.csv(paste0(WCpretty_dir,"/102464-Locations.csv"))
Argos_data$Date <- as.POSIXct(as.character(Argos_data$Date), format = '%m/%d/%Y %H:%M:%S', tz='UTC')
Beh_data <- read.csv(paste0(WCpretty_dir,"/102464-Behavior.csv"))
split_Beh <- split.dive.msg(Beh_data)
crawl_times <- lubridate::force_tz(as.POSIXct(split_Beh$Dives$StartTime, format = "%m/%d/%Y %H:%M:%S"), tzone = 'UTC')
CRAWL_data <- crawl.apply(Argos_data, model.interval = crawl_times, crs = 3310)
DIVE_data <- bhvr.interpolate(split_Beh$Dives, CRAWL_data$preds, matching = T)
SL_data <- sun.moon(DIVE_data)
SL_data<-SL_data[,c(1:3, 5:17, 23, 24, 44:65)]
SL_data$TimeofDay <- NA
for (i in 1:nrow(SL_data)) {
if (SL_data$sunAltitude[i] < -12) {
SL_data$TimeofDay[i] <- 'Night'
} else {
SL_data$TimeofDay[i] <- 'Day'
}
}
Oo36 <- SL_data
R.utils::sourceDirectory('C:/Users/marec/Docs/tagproc/R')
tag_folder <- "G:/Shared drives/METR_TagData/Killer whale/Sat tagging/Oo Tag 041/OoTag041-94805"
WCpretty_dir <- paste0(tag_folder,'/WC-pretty')
Argos_data <- read.csv(paste0(WCpretty_dir,"/94805-Locations.csv"))
Argos_data$Date <- as.POSIXct(as.character(Argos_data$Date), format = '%m/%d/%Y %H:%M:%S', tz='UTC')
Beh_data <- read.csv(paste0(WCpretty_dir,"/94805-Behavior.csv"))
split_Beh <- split.dive.msg(Beh_data)
crawl_times <- unique(lubridate::force_tz(as.POSIXct(split_Beh$Dives$StartTime, format = "%m/%d/%Y %H:%M:%S"), tzone = 'UTC'))
CRAWL_data <- crawl.apply(Argos_data, model.interval = crawl_times, crs = 3310)
DIVE_data <- bhvr.interpolate(split_Beh$Dives, CRAWL_data$preds, matching = T)
crawl_times
which(CRAWL_data$preds$Date == split_Beh$Dives$StartTime[750])
split_Beh$Dives$StartTime[750]
which(CRAWL_data$preds$Date == split_Beh$Dives$StartTime[751])
nrow(CRAWL_data$preds)
nrow(rbind(CRAWL_data$preds[c(1:750),], CRAWL_data$preds[c(750),], CRAWL_data$preds[c(751:nrow(CRAWL_data$preds)),]))
View((rbind(CRAWL_data$preds[c(1:750),], CRAWL_data$preds[c(750),], CRAWL_data$preds[c(751:nrow(CRAWL_data$preds)),]))
View(rbind(CRAWL_data$preds[c(1:750),], CRAWL_data$preds[c(750),], CRAWL_data$preds[c(751:nrow(CRAWL_data$preds)),])
View(rbind(CRAWL_data$preds[c(1:750),], CRAWL_data$preds[c(750),], CRAWL_data$preds[c(751:nrow(CRAWL_data$preds)),]))
CRAWL_data$preds <- rbind(CRAWL_data$preds[c(1:750),], CRAWL_data$preds[c(750),], CRAWL_data$preds[c(751:nrow(CRAWL_data$preds)),])
DIVE_data <- bhvr.interpolate(split_Beh$Dives, CRAWL_data$preds, matching = T)
R.utils::sourceDirectory('C:/Users/marec/Docs/tagproc/R')
tag_folder <- "G:/Shared drives/METR_TagData/Killer whale/Sat tagging/Oo Tag 036/OoTag036-102464"
WCpretty_dir <- paste0(tag_folder,'/WC-pretty')
Argos_data <- read.csv(paste0(WCpretty_dir,"/102464-Locations.csv"))
Argos_data$Date <- as.POSIXct(as.character(Argos_data$Date), format = '%m/%d/%Y %H:%M:%S', tz='UTC')
Beh_data <- read.csv(paste0(WCpretty_dir,"/102464-Behavior.csv"))
split_Beh <- split.dive.msg(Beh_data)
crawl_times <- lubridate::force_tz(as.POSIXct(split_Beh$Dives$StartTime, format = "%m/%d/%Y %H:%M:%S"), tzone = 'UTC')
CRAWL_data <- crawl.apply(Argos_data, model.interval = crawl_times, crs = 3310)
DIVE_data <- bhvr.interpolate(split_Beh$Dives, CRAWL_data$preds, matching = T)
SL_data <- sun.moon(DIVE_data)
SL_data<-SL_data[,c(1:3, 5:17, 23, 24, 44:65)]
SL_data$TimeofDay <- NA
for (i in 1:nrow(SL_data)) {
if (SL_data$sunAltitude[i] < -12) {
SL_data$TimeofDay[i] <- 'Night'
} else {
SL_data$TimeofDay[i] <- 'Day'
}
}
Oo36 <- SL_data
R.utils::sourceDirectory('C:/Users/marec/Docs/tagproc/R')
tag_folder <- "G:/Shared drives/METR_TagData/Killer whale/Sat tagging/Oo Tag 041/OoTag041-94805"
WCpretty_dir <- paste0(tag_folder,'/WC-pretty')
Argos_data <- read.csv(paste0(WCpretty_dir,"/94805-Locations.csv"))
Argos_data$Date <- as.POSIXct(as.character(Argos_data$Date), format = '%m/%d/%Y %H:%M:%S', tz='UTC')
Beh_data <- read.csv(paste0(WCpretty_dir,"/94805-Behavior.csv"))
split_Beh <- split.dive.msg(Beh_data)
crawl_times <- lubridate::force_tz(as.POSIXct(split_Beh$Dives$StartTime, format = "%m/%d/%Y %H:%M:%S"), tzone = 'UTC')
CRAWL_data <- crawl.apply(Argos_data, model.interval = crawl_times, crs = 3310)
CRAWL_data$preds <- rbind(CRAWL_data$preds[c(1:750),], CRAWL_data$preds[c(750),], CRAWL_data$preds[c(751:nrow(CRAWL_data$preds)),])
DIVE_data <- bhvr.interpolate(split_Beh$Dives, CRAWL_data$preds, matching = T)
SL_data <- sun.moon(DIVE_data)
SL_data<-SL_data[,c(1:3, 5:17, 23, 24, 44:65)]
SL_data$TimeofDay <- NA
for (i in 1:nrow(SL_data)) {
if (SL_data$sunAltitude[i] < -12) {
SL_data$TimeofDay[i] <- 'Night'
} else {
SL_data$TimeofDay[i] <- 'Day'
}
}
Oo41 <- SL_data
Oobehlog <- rbind(Oo36, Oo41)
View(Oobehlog)
write.csv(Oobehlog, 'Oo36-41_CRAWLBehLog_Environment.csv', row.names=F)
getwd()
land <- suppressMessages(suppressWarnings(ptolemy::calcur()))
locs1=c(-118.3462,32.973)
locs2=c(-118.614,32.821)
#determine if land is between two points
locs <- rbind(locs1, locs2)
locs
land
crs(land)
sf::st_crs(land)
sf_locs <- st_as_sfc(paste0("LINESTRING(", locs[1,1], ' ', locs[1,2], ', ', locs[2,1], ' ', locs[2,2], ')')) %>%
sf::st_set_crs(4326) %>%
sf::st_transform(as.numeric(strsplit(st_crs(land)$input,':')[[1]][2]))
suppressPackageStartupMessages(require(sf))
suppressPackageStartupMessages(require(ptolemy))
sf_locs <- st_as_sfc(paste0("LINESTRING(", locs[1,1], ' ', locs[1,2], ', ', locs[2,1], ' ', locs[2,2], ')')) %>%
sf::st_set_crs(4326) %>%
sf::st_transform(as.numeric(strsplit(st_crs(land)$input,':')[[1]][2]))
sf_locs
plot(land)
plot(land$geometry)
plot(land$geometry[[1]])
plot(land$geometry[[2]])
plot(land$geometry[[3]])
plot(land$geometry[[4]])
plot(land$geometry[[5]])
plot(land$geometry[[100]])
plot(land$geometry[[1000]])
plot(land$geometry[[1]])
plot(land$geometry[[1:5]])
plot(land$geometry[[5]])
plot(land$geometry[[6]])
plot(land$geometry[[7]])
plot(land$geometry[[100]])
plot(land$geometry[[10000]])
plot(land$geometry[[1000]])
plot(land$geometry[[100]])
plot(land$geometry[[500]])
plot(land$geometry[[400]])
plot(land$geometry[[450]])
plot(land$geometry[[475]])
plot(land$geometry[[476]])
plot(land$geometry[[477]])
plot(land$geometry[[478]])
plot(land$geometry[[479]])
st_intersection(sf_locs, land)
ints <- st_intersection(sf_locs, land)
ints
(length(ints) > 0)
plot(land)
points(locs)
points(locs,cex=5)
points(sf_locslocs,cex=5)
points(sf_locs,cex=5)
plot(sf_locs,add=T)
plot(sf_locs,add=T,cex=2)
plot(sf_locs,add=T,cex=3)
plot(sf_locs,add=T,cex=4)
plot(land)
plot(sf_locs,add=T,cex=4)
plot(sf_locs,add=T,cex=100)
plot(sf_locs,add=T,lwd=5)
plot(sf_locs,add=T,lwd=100)
plot(land)
plot(sf_locs,add=T,lwd=5,col='red')
locs2=c(-118,32)
#determine if land is between two points
locs <- rbind(locs1, locs2)
sf_locs <- st_as_sfc(paste0("LINESTRING(", locs[1,1], ' ', locs[1,2], ', ', locs[2,1], ' ', locs[2,2], ')')) %>%
sf::st_set_crs(4326) %>%
sf::st_transform(as.numeric(strsplit(st_crs(land)$input,':')[[1]][2]))
ints <- st_intersection(sf_locs, land)
length(ints)
